// SW에서 postmessage 수신
// if (navigator.serviceWorker) {
//     navigator.serviceWorker.controller.addEventListener("message", function (message) {
//         debug("Push event from worker", message);
//         console.log(message);

//         if (message.data.type === "push") {
//             _this.dispatchEvent({
//                 type: "push",
//                 push: message.data.push
//             });
//             console.log(message);
//         }
//     });
// }

self.addEventListener("message", function(message){
    debug("Push event from worker", message);
    console.log(message);

    if (message.data.type === "push") {
        _this.dispatchEvent({
            type: "push",
            push: message.data.push
        });
        console.log(message);
    }
});



self.addEventListener("push", function (ev) {
    var now = Date.now() / 1e3;
    var payload = ev.data ? ev.data.json() : {};
    var promises = [];

    if (payload.expiry && payload.expiry < now) {
        return ev.waitUntil(clearExpiredNotifications());
    }

    var payloadPromise = isAccPayload(payload) ? mapFromAccPayload(payload) : Promise.resolve(payload);
    ev.waitUntil(process());

    function process() {
        return payloadPromise.then(function (payload) {
            promises.push(sendToClients(payload));
            var title = payload.title || config.defaultTitle;
            var requireInteraction = payload.require_interaction || false;
            var sendId = payload.send_id;

            if (payload.body) {
                promises.push(self.registration.showNotification(title, {
                    body: payload.body,
                    icon: payload.icon || config.defaultIcon,
                    image: payload.image,
                    data: payload,
                    requireInteraction: requireInteraction
                }));
            }

            return Promise.all(promises).catch(function (err) {
                return console.error("error processing notification", err);
            }).then(function () {
                return clearExpiredNotifications(sendId);
            }).catch(function (err) {
                return console.error("error clearing notifications", err);
            });
        });
    }

    function clearExpiredNotifications(sendId) {
        return self.registration.getNotifications().then(function (notifications) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = notifications[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _notification = _step.value;

                    if (sendId && _notification.data.send_id === sendId) {
                        continue;
                    }

                    if (_notification.data.expiry && _notification.data.expiry < now) {
                        _notification.close();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
    }
});